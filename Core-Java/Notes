Index
Conditions(if, if-else, switch) 
Loops(for, while, do-while, for-each) 
Oops(Inheritance, Polymorphism, Encapsulation, Abstraction) 
Method overloading, overriding 
Constructors 
String 
Type casting, Upcasting 
Code optimization 
Collection(List and Set)
Exception Handling (try-catch, throws, finally)
Static & Final Keywords
Streams & Lambda Expressions (useful in Selenium)
File Handling (Read/write files, useful for test data handling)

Great! Let's start with Java Basics, covering variables, data types, and operators in detail.

1. Introduction to Java
Java is a high-level, object-oriented programming language designed for portability and platform independence. It follows the "Write Once, Run Anywhere" (WORA) principle, meaning Java code can run on any system with a Java Virtual Machine (JVM).

Writing Your First Java Program
Open IDE and create a new file: HelloWorld.java

Write this simple Java program:

public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, Java for Automation!");
    }
}
Save the file and run it using:

javac HelloWorld.java  // Compile the file
java HelloWorld       // Run the program

Variables and Data Types in Java
1. What is a Variable in Java?
A variable in Java is a container that holds data. It has:

A Name (Identifier) – Used to reference the variable

A Data Type – Defines what kind of data it holds

A Value – The actual data stored in it

Syntax of Declaring a Variable
java
Copy code
dataType variableName = value;
Example:

java
Copy code
int age = 25;
String name = "John";
2. Types of Variables in Java
Java has three types of variables:

1. Local Variables
Declared inside a method or block

Exist only within that method/block

Must be initialized before use

Example:

java
Copy code
public class Example {
    public void show() {
        int localVar = 10; // Local variable
        System.out.println(localVar);
    }
}
⚠ If you try to use localVar outside show(), you’ll get an error.

2. Instance Variables (Non-Static)
Declared inside a class but outside methods

Each object has its own copy

Default values are assigned (0, null, false, etc.)

Example:

java
Copy code
public class Person {
    String name; // Instance variable
    int age;
}
Each Person object has its own name and age.

3. Static Variables (Class Variables)
Declared with static keyword inside a class

Shared among all objects of a class

Only one copy exists for the entire class

Example:

java
Copy code
public class Example {
    static int count = 0; // Static variable
}
count is shared across all instances.

3. Java Data Types
Java has two categories of data types:

1. Primitive Data Types (8 types)
Primitive types store actual values directly in memory.

Data Type	Size	Default Value	Example
byte	1 byte	0	byte b = 100;
short	2 bytes	0	short s = 1000;
int	4 bytes	0	int num = 12345;
long	8 bytes	0L	long bigNum = 123456789L;
float	4 bytes	0.0f	float pi = 3.14f;
double	8 bytes	0.0	double precise = 3.1415926535;
char	2 bytes	'\u0000'	char letter = 'A';
boolean	1 bit	false	boolean isJavaFun = true;
Example:

java
Copy code
public class DataTypesExample {
    public static void main(String[] args) {
        int a = 10;
        float b = 5.5f;
        char c = 'J';
        boolean isValid = true;
        System.out.println("Integer: " + a);
        System.out.println("Float: " + b);
        System.out.println("Char: " + c);
        System.out.println("Boolean: " + isValid);
    }
}
2. Non-Primitive Data Types (Reference Types)
These store references to objects.

Data Type	Example
String	String name = "Java";
Arrays	int[] numbers = {1, 2, 3};
Classes	Person p = new Person();
Interfaces	Runnable r = new Thread();
Example:

java
Copy code
public class ReferenceExample {
    public static void main(String[] args) {
        String message = "Hello Java";
        System.out.println(message);
    }
}
4. Type Casting
Type casting converts one data type into another.

Implicit Casting (Widening)
Smaller → Larger (Automatic)

java
Copy code
int num = 100;
double d = num; // Implicit casting: int → double
Explicit Casting (Narrowing)
Larger → Smaller (Needs manual conversion)

java
Copy code
double pi = 3.14;
int intPi = (int) pi; // Explicit casting: double → int
5. Final Variables (Constants)
Use final keyword to make variables constant.

java
Copy code
final double PI = 3.1416;
PI = 3.14; // Error! Cannot modify final variable
Practice Questions on Variables & Data Types
Basic Questions
What is a variable? How do you declare and initialize one?

Explain the difference between int and long.

What happens if you declare a variable but don’t initialize it?

What are the three types of variables in Java?

Explain the difference between float and double.

Multiple Choice Questions (MCQs)
What is the default value of a boolean variable?
a) true
b) false
c) null
d) 0

Which of these is not a primitive data type?
a) int
b) String
c) double
d) boolean

What is the range of values for a byte in Java?
a) -128 to 127
b) 0 to 255
c) -32,768 to 32,767
d) -2,147,483,648 to 2,147,483,647

What keyword is used to declare a constant in Java?
a) static
b) final
c) const
d) immutable

Which data type would you use to store the value 3.1415926535?
a) float
b) double
c) int
d) long

Coding Questions
Declare a variable to store your name and print it.

Create a Java program that takes an integer as input and prints whether it's even or odd.

Write a program to swap two variables without using a third variable.

Write a program to store and print a character.

Declare a constant variable SPEED_LIMIT with value 60 and try modifying it.

Advanced Questions
What happens if you try to use a local variable without initialization?

Why do we use static variables in Java?

What are the key differences between char and String?

Explain the difference between instance and static variables.

Can we use a primitive data type as an object in Java?

Scenario-Based Questions
If a variable is declared inside a method, where can you access it?

Why should we avoid using global variables excessively?

How does Java handle integer overflow?

What happens if we try to store a double value inside an int without casting?

Can you change the data type of a variable once it's declared?

Type Casting & Conversion Questions
Write a program to convert an int to double.

Convert a double into an int and print both values.

Write a program that takes a float input and converts it into an int.

What is implicit and explicit type casting? Provide examples.

What will be the output of:

java
Copy code
int x = 5;
double y = x / 2;
System.out.println(y);
Let me know if you need detailed explanations for any question! Next, we can move to Operators in Java if you're ready.















ChatGPT can ma
